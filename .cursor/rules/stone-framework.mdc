---
description: Stone Throw Framework Development Guidelines
globs: *.ts *.tsx *.js *.json *.md *.mdc
alwaysApply: false
---
# Framework Positioning & Inspiration

- **Philosophy**: SSR-first, progressive enhancement, inspired by Enhance but leverages modern UnJS tools

- **Core**:

  - Uses SSR rendered custom-elements (Light Web Components).
  - State is managed with signals; each instance gets its own state.
  - Progressive Enhancement.

- **Registration**:

  - Components auto-register on SSR render.
  - Custom elements are defined once; `Stone.init(someRegistry)` registers all on the client.

- **Routing**:
  - Folder-based routing: URL paths map to Page.ts files in app/pages/.
  - Vinxi router (`app.config.js`) and page loader utilities handle mapping.

## Important Files

- `app/client.ts`: Client entry point
- `app/pages-router.ts`: Server entry point
- `app.config.json`: defines the entry points (vinxi)
- `lib/Stone.ts`: Main export file with public API
- `lib/componentDefinition.ts`: Contains the core component creation logic
- `lib/pageRenderer.ts`: Combines the Head (unhead) with the content and links the clientAssets
- `lib/registryUtils.ts`: Handles component registration with the browser
- `lib/sgnls.ts`: Implements the reactive state system
- `lib/types.ts`: TypeScript definitions for the framework

## State Management

- Component state is managed via signals
- Each component instance gets its own state copy
- Global state is preserved for SSR contexts

## Server-Side Rendering

- Components are automatically registered when rendered server-side
- Always wrap component content with the appropriate tag
- Use the `ssr` method for explicit server rendering needs

## Component Registration

- Components are auto-registered when rendered
- Custom elements are defined only once to prevent duplicate registration errors
- The `init` method must be called to register all components with the browser

## Folder-Based Routing

- Uses Vinxi's router capabilities to map URL paths to folder structures
- URL paths directly correspond to folder paths with a Page.ts file:
  - `/` → `app/pages/Page.ts`
  - `/about` → `app/pages/about/Page.ts`
  - `/blog/post` → `app/pages/blog/post/Page.ts`
- Implemented via:
  1. A router config in app.config.js that points to a handler
  2. A page loader utility that maps URL paths to page files
  3. A convention of putting Page.ts at each path level
