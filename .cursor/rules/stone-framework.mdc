---
description: Stone Throw Framework Development Guidelines
globs: *.ts *.tsx *.js *.json *.md *.mdc
alwaysApply: false
---

# Stone Throw Framework Development Guidelines

## Framework Positioning & Inspiration

- **Philosophy**: SSR-first, progressive enhancement, inspired by Enhance but leverages modern UnJS tools

- **Core**:

  - Uses SSR rendered custom-elements (Light Web Components).
  - State is managed with signals; each instance gets its own state.
  - Progressive Enhancement.

- **Registration**:

  - Components auto-register on SSR render.
  - Custom elements are defined once; A function registers all on the client.

  ```ts
  // client.ts

  // generated file by our vite plugin
  import { stoneComponentRegistry } from "./stone.generated";
  import { initializeCustomElements } from "@stonethrow/core/client";

  // on dom init
  // this function compares the import file with a list of component names that were set in SSR context on a Page.ts level (window.__STONE__)
  initializeCustomElements(stoneComponentRegistry);
  ```

- **Routing**:
  - Folder-based routing: URL paths map to Page.ts files in app/pages/.
  - Vinxi router (`app.config.js`) and page loader utilities handle mapping.

## Component Creation

- Components are created using the `create` function from "stone-throw/components"
- Import pattern: `import { create } from "@stonethrow/core/components"`

```ts
import { create } from "@stonethrow/core/components";

const MyComponent = create("my-component", {
  state: () => ({ count: 0 }),
  render: (state, props, children) => `<div>${state.count.get()}</div>`,
  init: (element, state) => {
    // Client-side enhancement
  },
});
```

## Important Files

- `app/client.ts`: Client entry point
- `app/pages-router.ts`: Server entry point
- `app.config.json`: defines the entry points (vinxi)

## Package Imports

All Stone Throw functionality is imported from the "stone-throw" package:

- `import { create } from "@stonethrow/core/components"` - Component creation
- `import { initializeCustomElements } from "@stonethrow/core/client"` - Client registration
- Core framework logic is encapsulated in the node module

## State Management

- Component state is managed via signals
- Each component instance gets its own state copy
- Global state is preserved for SSR contexts
- State is reactive and automatically triggers re-renders

## Server-Side Rendering

- Components are automatically registered when rendered server-side
- Always wrap component content with the appropriate tag
- Page handlers can be async for server-side data fetching
- Use async page handlers for operations like code highlighting with Shiki

## Component Registration

- Components are auto-registered when rendered
- Custom elements are defined only once to prevent duplicate registration errors
- The `init` method must be called to register all components with the browser

## Folder-Based Routing

- Uses Vinxi's router capabilities to map URL paths to folder structures
- URL paths directly correspond to folder paths with a Page.ts file:
  - `/` → `app/pages/Page.ts`
  - `/about` → `app/pages/about/Page.ts`
  - `/blog/post` → `app/pages/blog/post/Page.ts`
- Page handlers can be async for server-side operations
- Implemented via:
  1. A router config in app.config.js that points to a handler
  2. A page loader utility that maps URL paths to page files
  3. A convention of putting Page.ts at each path level
