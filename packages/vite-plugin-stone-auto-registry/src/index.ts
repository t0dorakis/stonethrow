import type { Plugin, ViteDevServer } from "vite";
import { promises as fs } from "fs";
import { join, relative, resolve, sep, posix } from "path";
import { kebabCase } from "scule";

interface StoneAutoRegistryOptions {
  componentsDir: string;
  output: string;
  extensions?: string[];
}

function toPosixPath(p: string) {
  return p.split(sep).join(posix.sep);
}

function getCustomElementName(file: string) {
  const base = file.replace(/\.[^.]+$/, "");
  let kebab = kebabCase(base);
  if (!kebab.includes("-")) kebab = `s-${kebab}`;
  return kebab;
}

async function generateRegistry(options: StoneAutoRegistryOptions) {
  const { componentsDir, output, extensions = [".ts", ".tsx"] } = options;
  const absDir = resolve(process.cwd(), componentsDir);
  const files = await fs.readdir(absDir);
  const componentFiles = files.filter((f) =>
    extensions.some((ext) => f.endsWith(ext))
  );

  // Generate mapping: { "s-card": "./components/Card" }
  const entries = await Promise.all(
    componentFiles.map(async (file) => {
      const name = getCustomElementName(file);
      const absOutput = resolve(process.cwd(), output);
      const outputDir = resolve(absOutput, "..");

      // Compute path relative to output file's directory
      let relPath = relative(outputDir, join(absDir, file));
      // Always use posix-style (forward slashes) for imports
      relPath = toPosixPath(relPath);
      // Remove .ts or .tsx extension for Vite import
      relPath = relPath.replace(/\.[tj]sx?$/, "");
      if (!relPath.startsWith(".")) relPath = "./" + relPath;

      return `  "${name}": () => import("${relPath}")`;
    })
  );

  const content = `// AUTO-GENERATED BY vite-plugin-stone-auto-registry
export const stoneComponentRegistry = {
${entries.join(",\n")}
} as const;
`;

  const absOutput = resolve(process.cwd(), output);
  await fs.writeFile(absOutput, content, "utf-8");
  console.log(`[stone] Generated component registry at ${output}`);
}

export default function stoneAutoRegistry(
  options: StoneAutoRegistryOptions
): Plugin {
  return {
    name: "vite-plugin-stone-auto-registry",
    async buildStart() {
      await generateRegistry(options);
    },
    configureServer(server: ViteDevServer) {
      // Watch for changes
      server.watcher.on("change", async (file) => {
        if (file.startsWith(resolve(process.cwd(), options.componentsDir))) {
          await generateRegistry(options);
          server.ws.send({ type: "full-reload" });
        }
      });
    },
  };
}
