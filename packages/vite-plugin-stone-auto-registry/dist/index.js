// src/index.ts
import { promises as fs } from "fs";
import { join, relative, resolve, sep, posix, dirname } from "path";
import { kebabCase } from "scule";
function toPosixPath(p) {
  return p.split(sep).join(posix.sep);
}
function getCustomElementName(file) {
  const base = file.replace(/\.[^.]+$/, "");
  let kebab = kebabCase(base);
  if (!kebab.includes("-")) kebab = `s-${kebab}`;
  return kebab;
}
async function generateRegistry(options) {
  const { componentsDir, output, extensions = [".ts", ".tsx"] } = options;
  const absDir = resolve(process.cwd(), componentsDir);
  const absOutput = resolve(process.cwd(), output);
  const outputDir = dirname(absOutput);
  try {
    await fs.access(absDir);
  } catch (error) {
    await fs.mkdir(absDir, { recursive: true });
    console.log(`[stone] Created components directory at ${componentsDir}`);
    await fs.mkdir(outputDir, { recursive: true });
    const content2 = `// AUTO-GENERATED BY vite-plugin-stone-auto-registry
export const stoneComponentRegistry = {} as const;
`;
    await fs.writeFile(absOutput, content2, "utf-8");
    console.log(`[stone] Generated empty component registry at ${output}`);
    return;
  }
  const files = await fs.readdir(absDir);
  const componentFiles = files.filter(
    (f) => extensions.some((ext) => f.endsWith(ext))
  );
  const entries = await Promise.all(
    componentFiles.map(async (file) => {
      const name = getCustomElementName(file);
      let relPath = relative(outputDir, join(absDir, file));
      relPath = toPosixPath(relPath);
      relPath = relPath.replace(/\.[tj]sx?$/, "");
      if (!relPath.startsWith(".")) relPath = "./" + relPath;
      return `  "${name}": () => import("${relPath}")`;
    })
  );
  const content = `// AUTO-GENERATED BY vite-plugin-stone-auto-registry
export const stoneComponentRegistry = {
${entries.join(",\n")}
} as const;
`;
  await fs.mkdir(outputDir, { recursive: true });
  await fs.writeFile(absOutput, content, "utf-8");
  console.log(`[stone] Generated component registry at ${output}`);
}
function stoneAutoRegistry(options) {
  return {
    name: "vite-plugin-stone-auto-registry",
    enforce: "pre",
    configResolved: async () => {
      await generateRegistry(options);
    },
    async buildStart() {
      await generateRegistry(options);
    },
    configureServer(server) {
      generateRegistry(options).catch((err) => {
        console.error("[stone] Error generating component registry:", err);
      });
      server.watcher.on("change", async (file) => {
        if (file.startsWith(resolve(process.cwd(), options.componentsDir))) {
          await generateRegistry(options);
          server.ws.send({ type: "full-reload" });
        }
      });
    }
  };
}
export {
  stoneAutoRegistry as default
};
