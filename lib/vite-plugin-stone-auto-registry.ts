import { Plugin } from "vite";
import { promises as fs } from "fs";
import path, { join, relative, resolve, sep, posix, dirname } from "path";
import { kebabCase } from "scule";

// if the component name doesn't contain a hyphen, add an s- prefix
const STONE_PREFIX = "s-";

interface StoneAutoRegistryOptions {
  componentsDir: string; // e.g. "app/components"
  output: string; // e.g. "app/stone.generated.ts"
  extensions?: string[]; // e.g. [".ts", ".tsx"]
}

function getCustomElementName(file: string) {
  const base = file.replace(/\.[^.]+$/, "");
  let kebab = kebabCase(base);
  if (!kebab.includes("-")) kebab = `s-${kebab}`;
  return kebab;
}

export default function stoneAutoRegistry(
  options: StoneAutoRegistryOptions
): Plugin {
  const { componentsDir, output, extensions = [".ts", ".tsx"] } = options;

  return {
    name: "vite-plugin-stone-auto-registry",
    async buildStart() {
      const absDir = resolve(process.cwd(), componentsDir);
      const files = await fs.readdir(absDir);
      const componentFiles = files.filter((f) =>
        extensions.some((ext) => f.endsWith(ext))
      );

      const absOutput = resolve(process.cwd(), output);
      const outputDir = dirname(absOutput);

      // Generate mapping: { "mini-counter": "./components/MiniCounter" }
      const entries = await Promise.all(
        componentFiles.map(async (file) => {
          const name = getCustomElementName(file);
          // Compute the path relative to the output file's directory
          let relPath = relative(outputDir, join(absDir, file));
          // Always use posix-style (forward slashes) for imports
          relPath = posix.join(...relPath.split(path.sep));
          // Remove .ts or .tsx extension for Vite import
          relPath = relPath.replace(/\.[tj]sx?$/, "");
          if (!relPath.startsWith(".")) relPath = "./" + relPath;
          return `  "${name}": () => import("${relPath}")`;
        })
      );

      const content = `// AUTO-GENERATED BY vite-plugin-stone-auto-registry
            export const stoneComponentRegistry = {
            ${entries.join(",\n")}
            } as const;
            `;

      await fs.writeFile(absOutput, content, "utf-8");
      this.info(`[stone] Generated component registry at ${output}`);
    },
    // Ensure the generated file is watched for changes
    async handleHotUpdate(ctx) {
      if (ctx.file.startsWith(resolve(process.cwd(), componentsDir))) {
        await this.buildStart?.();
        ctx.server.ws.send({ type: "full-reload" });
      }
    },
  };
}
